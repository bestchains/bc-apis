/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Channel is the Schema for the channels API
 */
export interface Channel {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * ChannelSpec defines the desired state of Channel
   */
  spec?: {
    /**
     * Description for this Channel
     */
    description?: string;
    /**
     * ID Channel ID
     */
    id: string;
    /**
     * License should be accepted by the user to be able to setup console
     */
    license: {
      /**
       * Accept should be set to true to accept the license.
       */
      accept?: true;
      [k: string]: any;
    };
    /**
     * Members list all organization in this Channel
     */
    members: {
      initiator?: boolean;
      /**
       * JoinedAt is the proposal succ time
       */
      joinedAt?: string;
      /**
       * JoinedBy is the proposal name which joins this member into federation
       */
      joinedBy?: string;
      name?: string;
      [k: string]: any;
    }[];
    /**
     * Network which this channel belongs to
     */
    network: string;
    /**
     * Peers list all fabric peers joined at this channel
     */
    peers?: {
      name?: string;
      namespace?: string;
      [k: string]: any;
    }[];
    [k: string]: any;
  };
  /**
   * ChannelStatus defines the observed state of Channel
   */
  status?: {
    /**
     * CRStatus is the object that defines the status of a CR
     */
    archivedStatus?: {
      /**
       * ErrorCode is the code of classification of errors
       */
      errorcode?: number;
      /**
       * LastHeartbeatTime is when the controller reconciled this component
       */
      lastHeartbeatTime?: string;
      /**
       * Message provides a message for the status to be shown to customer
       */
      message?: string;
      /**
       * Reason provides a reason for an error
       */
      reason?: string;
      /**
       * Status is defined based on the current status of the component
       */
      status?: string;
      /**
       * Type is true or false based on if status is valid
       */
      type?: string;
      /**
       * Version is the product (IBP) version of the component
       */
      version?: string;
      /**
       * Versions is the operand version of the component
       */
      versions?: {
        /**
         * Reconciled provides the reconciled version of the operand
         */
        reconciled: string;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * ErrorCode is the code of classification of errors
     */
    errorcode?: number;
    /**
     * LastHeartbeatTime is when the controller reconciled this component
     */
    lastHeartbeatTime?: string;
    /**
     * Message provides a message for the status to be shown to customer
     */
    message?: string;
    peerConditions?: {
      /**
       * Last time the condition transitioned from one status to another.
       */
      lastTransitionTime?: string;
      /**
       * Human-readable message indicating details about last transition.
       */
      message?: string;
      name?: string;
      namespace?: string;
      /**
       * Unique, one-word, CamelCase reason for the condition's last transition.
       */
      reason?: string;
      /**
       * Status is the status of the condition. Can be True, False, Unknown.
       */
      status: string;
      /**
       * Type is the type of the condition.
       */
      type: string;
      [k: string]: any;
    }[];
    /**
     * Reason provides a reason for an error
     */
    reason?: string;
    /**
     * Status is defined based on the current status of the component
     */
    status?: string;
    /**
     * Type is true or false based on if status is valid
     */
    type?: string;
    /**
     * Version is the product (IBP) version of the component
     */
    version?: string;
    /**
     * Versions is the operand version of the component
     */
    versions?: {
      /**
       * Reconciled provides the reconciled version of the operand
       */
      reconciled: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
  [k: string]: any;
}
