/**
 * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Cluster represents the desire state and status of a member cluster.
 */
export interface Cluster {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * Spec represents the specification of the desired behavior of member cluster.
   */
  spec?: {
    /**
     * The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.
     */
    apiEndpoint?: string;
    /**
     * InsecureSkipTLSVerification indicates that the karmada control plane should not confirm the validity of the serving certificate of the cluster it is connecting to. This will make the HTTPS connection between the karmada control plane and the member cluster insecure. Defaults to false.
     */
    insecureSkipTLSVerification?: boolean;
    /**
     * Provider represents the cloud provider name of the member cluster.
     */
    provider?: string;
    /**
     * ProxyURL is the proxy URL for the cluster. If not empty, the karmada control plane will use this proxy to talk to the cluster. More details please refer to: https://github.com/kubernetes/client-go/issues/351
     */
    proxyURL?: string;
    /**
     * Region represents the region of the member cluster locate in.
     */
    region?: string;
    /**
     * SecretRef represents the secret contains mandatory credentials to access the member cluster. The secret should hold credentials as follows: - secret.data.token - secret.data.caBundle
     */
    secretRef?: {
      /**
       * Name is the name of resource being referenced.
       */
      name: string;
      /**
       * Namespace is the namespace for the resource being referenced.
       */
      namespace: string;
      [k: string]: any;
    };
    /**
     * SyncMode describes how a cluster sync resources from karmada control plane.
     */
    syncMode: 'Push' | 'Pull';
    /**
     * Taints attached to the member cluster. Taints on the cluster have the "effect" on any resource that does not tolerate the Taint.
     */
    taints?: {
      /**
       * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
       */
      effect: string;
      /**
       * Required. The taint key to be applied to a node.
       */
      key: string;
      /**
       * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
       */
      timeAdded?: string;
      /**
       * The taint value corresponding to the taint key.
       */
      value?: string;
      [k: string]: any;
    }[];
    /**
     * Zone represents the zone of the member cluster locate in.
     */
    zone?: string;
    [k: string]: any;
  };
  /**
   * Status represents the status of member cluster.
   */
  status?: {
    /**
     * APIEnablements represents the list of APIs installed in the member cluster.
     */
    apiEnablements?: {
      /**
       * GroupVersion is the group and version this APIEnablement is for.
       */
      groupVersion: string;
      /**
       * Resources is a list of APIResource.
       */
      resources?: {
        /**
         * Kind is the kind for the resource (e.g. 'Deployment' is the kind for resource 'deployments')
         */
        kind: string;
        /**
         * Name is the plural name of the resource.
         */
        name: string;
        [k: string]: any;
      }[];
      [k: string]: any;
    }[];
    /**
     * Conditions is an array of current cluster conditions.
     */
    conditions?: {
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: string;
      /**
       * message is a human readable message indicating details about the transition. This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
       */
      observedGeneration?: number;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
       */
      type: string;
      [k: string]: any;
    }[];
    /**
     * KubernetesVersion represents version of the member cluster.
     */
    kubernetesVersion?: string;
    /**
     * NodeSummary represents the summary of nodes status in the member cluster.
     */
    nodeSummary?: {
      /**
       * ReadyNum is the number of ready nodes in the cluster.
       */
      readyNum?: number;
      /**
       * TotalNum is the total number of nodes in the cluster.
       */
      totalNum?: number;
      [k: string]: any;
    };
    /**
     * ResourceSummary represents the summary of resources in the member cluster.
     */
    resourceSummary?: {
      /**
       * Allocatable represents the resources of a cluster that are available for scheduling. Total amount of allocatable resources on all nodes.
       */
      allocatable?: {
        [k: string]: number | string;
      };
      /**
       * Allocated represents the resources of a cluster that have been scheduled. Total amount of required resources of all Pods that have been scheduled to nodes.
       */
      allocated?: {
        [k: string]: number | string;
      };
      /**
       * Allocating represents the resources of a cluster that are pending for scheduling. Total amount of required resources of all Pods that are waiting for scheduling.
       */
      allocating?: {
        [k: string]: number | string;
      };
      [k: string]: any;
    };
    [k: string]: any;
  };
  [k: string]: any;
}
