/**
  * 由 src/kubernetes/gen/index.ts 自动生成
 * !!! 请不要修改 !!!
 */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * User is the Schema for the users API
 */
export interface User {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * UserSpec defines the desired state of User
   */
  spec?: {
    /**
     * 支持1~128任意字符
     */
    description?: string;
    /**
     * Unique email address(https://www.ietf.org/rfc/rfc5322.txt).
     */
    email: string;
    groups?: string[];
    name: string;
    /**
     * 需要同时包含数字，字母特殊符号，长度为8~64个字符 Password pattern is tricky here. The rule is simple: length between [6,64], at least one uppercase letter, one lowercase letter, one digit. The regexp in console(javascript) is quite straightforward: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^]{6,64}$ But in Go, we don't have ?= (back tracking) capability in regexp (also in CRD validation pattern) So we adopted an alternative scheme to achieve. Use 6 different regexp to combine to achieve the same effect. These six schemes enumerate the arrangement of numbers, uppercase letters, and lowercase letters that appear for the first time. - ^(.*[a-z].*[A-Z].*[0-9].*)$ stands for lowercase letter comes first, then followed by an uppercase letter, then a digit. - ^(.*[a-z].*[0-9].*[A-Z].*)$ stands for lowercase letter comes first, then followed by a digit, then an uppercase leeter. - ^(.*[A-Z].*[a-z].*[0-9].*)$ ... - ^(.*[A-Z].*[0-9].*[a-z].*)$ ... - ^(.*[0-9].*[a-z].*[A-Z].*)$ ... - ^(.*[0-9].*[A-Z].*[a-z].*)$ ... Last but not least, the bcrypt string is also included to match the encrypted password. ^(\$2[ayb]\$.{56})$
     */
    password?: string;
    /**
     * 11位数字
     */
    phone?: string;
    /**
     * user role, on of admin,platform,infrastruce, empty is common user
     */
    role?: string;
    [k: string]: any;
  };
  /**
   * UserStatus defines the observed state of User
   */
  status?: {
    /**
     * Groups defines the user belongs which group
     */
    groups?: string[];
    /**
     * Last login attempt timestamp
     */
    lastLoginTime?: string;
    lastTransitionTime?: string;
    reason?: string;
    /**
     * The user status
     */
    state?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
